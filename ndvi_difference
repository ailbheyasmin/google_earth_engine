//Specify area of interest:
var allensworth=ee.Geometry.Rectangle(aoi);
// Load NLCDs, getting their 'landcover' band to display:
var nlcd15 = ee.Image('USGS/NLCD/NLCD2015').select('landcover').clip(aoi);
//print(nlcd15.getInfo()) // check the console to see properties of the NLCD dataset and landcover metadata

var nlcd18 = ee.Image('USGS/NLCD/NLCD2018').select('landcover').clip(aoi);

// add both NLCDs to display (they will load in their original color palette included with the dataset)
Map.addLayer(nlcd15, {}, 'NLCD 2015');
Map.addLayer(nlcd18, {}, 'NLCD 2018');
Map.centerObject(aoi); // center the map on the study site
// OPTIONAL code block to see which NLCD land cover classes are present in the map:
// reduceRegion by each group, here the groups are classes; notice the order of bands
var areas = ee.Image.pixelArea().addBands(nlcd15).reduceRegion({
  reducer: ee.Reducer.count().group({
    groupField: 1,
    groupName: 'landcover',
  }),
  geometry: aoi,
  scale: 30,
  bestEffort: true,
});
print(areas)

// this is a list which contains landcover code of classes present in the area which we can make note of:
var areaList2015 = ee.List(ee.List(areas.get('groups')));
print(areaList2015)
//remap each classification into new classes
var nlcd15r = nlcd15.remap([11, 21, 22, 23, 24, 31, 52, 71, 81, 82, 90, 95], 
                           [ 0,  1,  1,  1,  1,  2,  3,  3,  4,  4,  5,  5]);
var nlcd18r = nlcd18.remap([11, 21, 22, 23, 24, 31, 52, 71, 81, 82, 90, 95], 
                           [ 0,  1,  1,  1,  1,  2,  3,  3,  4,  4,  5,  5]);
//create a new palette for our class codes 0-5
var mypalette=['476ba1', 'ee0000', 'b3aea3', 'caca78', 'ab7028', '70a3ba'];
//load remapped images with the new palette:
Map.addLayer(nlcd15r, {'min': 0, 'max': 5, 'palette': mypalette}, 'Remapped 2015');
Map.addLayer(nlcd18r, {'min': 0, 'max': 5, 'palette': mypalette}, 'Remapped 2018');
//Stack two landcovers while renaming bands to year names
// to force each pixel have two class IDs, before ('2015') and after ('2018'):
var stackedClassifications = nlcd18r.rename('2018')
    .addBands(nlcd15r.rename('2015'));

//"Sample" pixels from the stacked images    
var sample = stackedClassifications.sample({
  region: aoi,
  scale: 30,
  numPixels: 100000000
});
//Cross-tabulate two classifications to get pixel counts
var transitionMatrix = sample.errorMatrix({
  actual: '2015', // rows, axis 0, "from class" or "before"
  predicted: '2018' // columns, axis 1, "to class" or "after"
});
print('transitionMatrix', transitionMatrix);

//"Producer's accuracy": here means proportion of class no change counts to class areas in 2015:
//print('% No change of 2015 class', transitionMatrix.producersAccuracy().getInfo())
//"User's accuracy": here means proportion of class no change counts to new class areas in 2018:
//print('% No change relative to 2018', transitionMatrix.consumersAccuracy().getInfo())
//2015: use a late summer Landsat-5 image with the least cloud cover:
var image1 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
    .filter(ee.Filter.expression('WRS_PATH ==  37 && WRS_ROW == 37')) //Select only the specific Landsat tile/scene which covers aoi
    .filterDate('2015-07-01', '2015-08-31') 
    .sort('CLOUD_COVER') //choosing a best image based on lowest cloud cover
    .first() 
    .select('B[1-5,7]') //select bands 1-5 & 7 
    .clip(aoi); //clipping to our smaller area within the Landsat scene
    
    var vis_params1 = {
    'min': 0,
    'max': 2500,
    'bands': ['B3', 'B2', 'B1'] //red, green, blue for display
};
Map.centerObject(aoi, 11);
Map.addLayer(image1, vis_params1, "Landsat-5 RGB (2015)");

//2018: use a late summer Landsat-8 image with the least cloud cover:
var image2 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filter(ee.Filter.expression('WRS_PATH ==  37 && WRS_ROW == 37')) //Select only the specific Landsat tile/scene
    .filterDate('2018-07-01', '2018-08-31') 
    .sort('CLOUD_COVER') //choosing a best image based on lowest cloud cover
    .first() 
    .select('B[2-7]') //select bands 2-7 (Landsat-8 designations)
    .clip(aoi); 
    
    var vis_params2 = {
    'min': 0,
    'max': 2500,
    'bands': ['B4', 'B3', 'B2'] //red, green, blue for display
};

Map.addLayer(image2, vis_params2, "Landsat-8 RGB (2018)") ;

//Calculate NDVI for each date considering different band names:
//2015 Landsat-5
var ndvi1 = image1.normalizedDifference(['B4', 'B3']).rename('NDVI');
Map.addLayer(ndvi1, {min:-1, max:1}, 'NDVI 2015');
//2018 Landsat-8
var ndvi2 = image2.normalizedDifference(['B5', 'B4']).rename('NDVI');
Map.addLayer(ndvi2, {min:-1, max:1}, 'NDVI 2018');

//Compute NDVI difference between 2018 and 2015:
var ndvidiff = ndvi2.subtract(ndvi1);

//create a custom color ramp for different values of difference thresholds:
var sld_intervals = '\
<RasterSymbolizer>\
  <ColorMap  type="intervals" extended="false" >\
    <ColorMapEntry color="#471170" quantity="-1" label="lte -1" opacity="1"/>\
    <ColorMapEntry color="#2740b0" quantity="-0.5" label="-0.5... -1" />\
    <ColorMapEntry color="#97cedb" quantity="-0.1" label="-0.1...-0.5" />\
    <ColorMapEntry color="#c2baba" quantity="0.1" label="-0.1... 0.1" />\
    <ColorMapEntry color="#ffff00" quantity="0.5" label="0.1-0.5" />\
    // <ColorMapEntry color="#ff0000" quantity="1" label="0.5-1" />\
  </ColorMap>\
</RasterSymbolizer>';
//use this to visualize ndvi difference
Map.addLayer(ndvidiff.sldStyle(sld_intervals), {}, 'ndvi difference');

// ADD legend
var legend_colors = ['471170', '2740b0','97cedb','c2baba','ffff00','ff0000']; // same as in the SLD
var legend_keys = ['<-1', '-1 to -0.5', '-0.5 to -0.1', '-0.1 to 0.1', '0.1 to 0.5', '>0.5'];

// adding a legend as a small rectangular panel in the Map view:
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Create legend title
var legendTitle = ui.Label({
  value: 'NDVI diff. 2016-2001',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});

// Add the title to the panel
legend.add(legendTitle);
    
// Create and style 1st row of the legend.
var makeRow = function(color, name) {
      
      // Create the label that is the colored box:
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });

// Create the label filled with the description text:
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

//  Specify palette with the colors
var palette2 =legend_colors;

// name of the legend
var names = legend_keys;
// Add color and and names
for (var i = 0; i < 6; i++) {
  legend.add(makeRow(palette2[i], names[i]));
  }  

// add legend to map (alternatively you can print the legend to the console if youâ€™d like)  
Map.add(legend);  
