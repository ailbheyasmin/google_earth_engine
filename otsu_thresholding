// base code adapted from:
// Buettig, S.; Lins, M.; Goihl, S. WaterMask Analyzer (WMA)â€“A User-Friendly Tool to
// Analyze and Visualize Temporal Dynamics of Inland Water Body Extents. Remote Sens. 
// 2022, 14, 4485. https://doi.org/10.3390/rs14184485

// import aoi geometry, then zoom to region of interest
Map.centerObject(aoi);

// import S1 and filter data series
var s1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
  .filterBounds(aoi)
  .filterDate('2023-04-20','2023-08-20')
  .filter(ee.Filter.contains({leftField: ".geo", rightValue: aoi}))
  .map(function(image) {
    return image.clip(Map.getBounds(true));
  })
  .map(function(image) {
    return image.addBands(
      image.select('VV')
        .focal_median(50, 'circle', 'meters')
        .rename('VV_smoothed')
    );
  });

print(s1);

// function to compute Otsu threshold
// Otsu, N. (1979). A Threshold Selection Method from Gray-Level Histograms. 
// IEEE Transactions on Systems, Man, and Cybernetics, 9(1), 62-66.
var otsu = function(histogram) {
  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));
  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));
  var size = means.length().get([0]);
  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);
  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);
  var mean = sum.divide(total);
  var indices = ee.List.sequence(1, size);

  // compute between sum of squares, where each mean partitions the data
  var bss = indices.map(function(i) {
    var aCounts = counts.slice(0, 0, i);
    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);
    var aMeans = means.slice(0, 0, i);
    var aMean = aMeans.multiply(aCounts).reduce(ee.Reducer.sum(), [0]).get([0]).divide(aCount);
    var bCount = total.subtract(aCount);
    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
    return aCount.multiply(aMean.subtract(mean).pow(2)).add(
      bCount.multiply(bMean.subtract(mean).pow(2))
    );
  });

  return means.sort(bss).get([-1]);
};

// function to add water mask as additional band
var addWaterMask = function(image) {
  var histogram = image.select('VV').reduceRegion({
    reducer: ee.Reducer.histogram(255, 2)
      .combine('mean', null, true)
      .combine('variance', null, true), 
    geometry: aoi, 
    scale: 10,
    bestEffort: true
  });
  var threshold = otsu(histogram.get('VV_histogram'));
  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');
  return image.addBands(waterMask.updateMask(waterMask));
};

s1 = s1.map(addWaterMask);

// calculate water occurrence
var minOccurrence = 10;
var waterSum = s1.select('waterMask').reduce(ee.Reducer.sum());
var waterFrequency = waterSum.divide(s1.select('waterMask').size()).multiply(100);
var waterFrequencyMasked = waterFrequency.updateMask(waterFrequency.gt(minOccurrence));

// add color bar (base code adapted from: 
// https://gis.stackexchange.com/questions/290713/adding-map-key-to-map-or-console-in-google-earth-engine
// https://code.earthengine.google.com/9f890c110e98fa3391480543009c8028)
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '300x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}

function makeLegend(lowLine, midLine, highLine, lowText, midText, highText, palette) {
  var labelHeader = ui.Label('Water occurrence during investigation period', {
    margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'
  });
  var labelLines = ui.Panel([
    ui.Label(lowLine, {margin: '-4px 21px'}),
    ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(highLine, {margin: '-4px 21px'})
  ], ui.Panel.Layout.flow('horizontal'));
  var labelPanel = ui.Panel([
    ui.Label(lowText, {margin: '0px 14.5px'}),
    ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(highText, {margin: '0px 1px'})
  ], ui.Panel.Layout.flow('horizontal'));

  return ui.Panel({
    widgets: [labelHeader, ColorBar(palette), labelLines, labelPanel], 
    style: {position: 'bottom-left'}
  });
}

Map.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']));

// add layers to map
Map.addLayer(s1.median(), {bands: ['VV','VV','VV'], min: -20, max: 0}, 'S1-image [median]');
Map.addLayer(waterFrequencyMasked, {min: minOccurrence, max: 100, palette: ['orange','yellow','lightblue','darkblue']}, 'Percentage of annual water occurrence');

// create and print histogram
var ClassChart = ui.Chart.image.series({
  imageCollection: s1.select('waterMask'),
  region: aoi,
  reducer: ee.Reducer.sum(),
  scale: 100,
}).setOptions({
  title: 'Area of the identified water mask',
  vAxis: {title: 'area'},
  lineWidth: 1.5,
  pointSize: 2
});

ClassChart.style().set({
  position: 'bottom-right',
  width: '492px',
  height: '300px'
});

// callback function to add image to map corresponding with clicked data point on chart
ClassChart.onClick(function(xValue, yValue, seriesName) {
  if (!xValue) return;

  // display image for clicked date
  var equalDate = ee.Filter.equals('system:time_start', xValue);
  var classification = ee.Image(s1.filter(equalDate).first()).clip(aoi).select('waterMask'); 
  var SARimage = ee.Image(s1.filter(equalDate).first());
  var dateString = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short'});

  var S1Layer = ui.Map.Layer(SARimage, {
    bands: ['VV'],
    max: 0,
    min: -20
  }, 'S1-Image ['+ dateString +']');
  
  Map.layers().reset([S1Layer]);

  var visParamsS1Layer = {
    min: 0,
    max: 1,
    palette: ['#FFFFFF','#0000FF']
  };

  // add water classification
  Map.addLayer(classification, visParamsS1Layer, 'water mask [' + dateString + ']');
});
